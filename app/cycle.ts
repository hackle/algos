function longestCycle(edges: number[]): number {
    let outs: [number, number][] = [];
    edges.forEach((cur, idx) => { 
      if (cur != -1) outs.push([idx, cur]);
    });

    function whit(outs: [number, number][]): [number, number][] {
        let ins: Record<number, 1> = {};
        outs.forEach(([_, v]) => { ins[v] = 1 });

        const insOuts = outs.filter(([k, v]) => !!ins[k]);

        return insOuts.length == outs.length ? insOuts : whit(insOuts as any) as any;
    }

    const rest = whit(outs);
    if (rest.length == 0) return -1;

    const lookup = Object.fromEntries(rest);

    type Init = { key: number, head: number, map: Set<number> }

    const inits: Init[] = rest.map(([k, v]) => ({ key: k, head: v, map: new Set([k, v]) }));

    let completed = -1;

    function try1(inits: Init[]) {
      const nexts = inits.reduce((vss: Init[], cur: Init) => {
        const head = lookup[cur.head];
        cur.map.add(head);
        const incre = { ...cur, head };
         
        return [incre, ...vss.filter((xs) => !cur.map.has(xs.key))];
  
      }, []);

      console.log(nexts);
      nexts.forEach((vs) => { if (vs.key == vs.head) completed = Math.max(completed, vs.map.size); });
      const rests = nexts.filter(xs => xs.key != xs.head);


      if (rests.length == 0) {
        return;
      }

      try1(rests);
    }

    try1(inits);

    return completed;
};


console.log(longestCycle([1,2,0,4,5,6,3,8,9,7]));
// console.log(longestCycle([78,201,23,41,466,319,546,264,75,44,67,732,26,89,696,302,235,171,490,196,689,452,616,531,536,428,206,465,606,36,29,350,198,292,692,101,540,413,445,601,667,435,144,186,386,571,301,430,274,267,87,547,412,152,242,641,438,146,132,79,560,539,230,390,419,449,367,457,10,464,586,727,444,252,-1,573,533,420,716,109,578,356,497,97,310,682,487,202,233,107,728,535,552,328,120,395,542,718,12,614,448,417,683,105,529,605,723,155,81,98,567,305,288,199,51,393,495,210,592,245,677,607,654,733,94,485,370,637,477,562,101,527,244,708,626,239,50,200,600,337,407,575,381,197,111,383,397,408,316,451,62,482,299,427,46,569,-1,584,325,705,286,149,639,304,169,624,473,35,192,480,127,361,585,611,695,441,368,486,248,492,160,700,9,343,688,671,137,199,-1,164,5,575,22,2,521,421,579,446,262,191,314,332,426,188,627,280,395,85,676,604,631,324,306,43,669,80,369,674,453,404,556,330,187,712,287,114,398,388,13,121,459,250,660,734,450,726,567,360,71,48,282,729,656,-1,532,135,91,175,140,331,681,625,555,143,730,207,364,617,157,702,159,599,39,49,236,14,558,691,70,59,-1,507,636,460,550,545,597,241,321,434,167,28,126,34,317,84,21,61,82,318,63,644,495,591,613,631,214,258,415,595,489,687,359,37,366,123,514,414,133,715,666,534,345,342,365,195,731,119,596,645,53,172,583,168,234,581,426,577,437,273,709,247,725,-1,289,439,64,537,469,670,298,148,261,211,620,635,340,31,467,526,499,56,622,615,618,719,508,432,260,522,657,557,506,108,151,566,315,649,83,173,54,16,422,40,271,166,253,628,387,690,161,722,572,455,204,102,363,630,184,509,391,176,640,112,442,587,714,99,563,11,511,60,249,393,217,498,218,678,272,673,129,409,443,643,293,380,384,96,603,255,208,69,303,312,-1,-1,462,334,134,447,19,117,216,227,27,721,335,598,348,574,685,265,440,470,411,240,642,220,433,118,24,125,341,658,15,307,154,454,163,483,34,334,322,65,602,58,707,68,-1,66,358,80,392,720,354,436,400,355,90,27,659,279,170,474,300,456,520,629,509,9,320,336,549,20,67,6,178,436,504,278,590,360,346,100,502,609,179,634,237,621,185,52,73,254,277,269,256,633,205,476,42,518,651,231,7,524,711,405,672,124,190,541,404,257,559,655,647,665,410,1,226,534,232,650,313,222,246,17,150,710,576,372,181,275,351,385,357,496,375,396,418,684,523,551,568,503,698,694,513,406,623,281,347,717,294,488,142,300,259,528,180,377,557,543,376,648,194,680,225,402,30,530,554,92,268,32,612,662,379,76,463,221,675,57,86,580,276,138,403,724,77,371,290,374,38,399,638,223,3,394,713,594,224,251,679,353,481,209,104,193,177,153,653,695,327,215,538,352,493,317,429,515,183,122,25,652,478,472,285,238,544,292,632,212,401,512,229,55,0,704,43,623,349,436,158,525,588,103,162,266,593,564,491,608,308,47,8,88,373,291,699,189,510,4,72,570,165,228,362,416,147,18,136,545,128,553,500,431,423,519,106,139,548,145,565,49,622,664,646,339,344,701,323,505,458,45,329,697,309,296,394,338,378,297,516,162,382,610,561,517,686,589,93,131,703]));